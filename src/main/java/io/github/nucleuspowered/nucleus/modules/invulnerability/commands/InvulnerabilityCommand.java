/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.commands;

import io.github.nucleuspowered.nucleus.internal.command.ICommandContext;
import io.github.nucleuspowered.nucleus.internal.command.ICommandExecutor;
import io.github.nucleuspowered.nucleus.internal.command.ICommandResult;
import io.github.nucleuspowered.nucleus.internal.command.NucleusParameters;
import io.github.nucleuspowered.nucleus.internal.command.annotation.Command;
import io.github.nucleuspowered.nucleus.internal.command.annotation.EssentialsEquivalent;
import io.github.nucleuspowered.nucleus.modules.invulnerability.InvulnerabilityPermissions;
import io.github.nucleuspowered.nucleus.modules.invulnerability.services.InvulnerabilityService;
import io.github.nucleuspowered.nucleus.services.INucleusServiceCollection;
import org.spongepowered.api.command.CommandException;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.command.args.CommandElement;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.util.annotation.NonnullByDefault;

@NonnullByDefault
@EssentialsEquivalent({"god", "godmode", "tgm"})
@Command(aliases = {"god", "invuln", "invulnerability"}, basePermission = InvulnerabilityPermissions.BASE_GOD, commandDescriptionKey = "god")
public class InvulnerabilityCommand implements ICommandExecutor<CommandSource> {

    public static final String PVP_OVERRIDE = "pvp.override";

    @Override
    public CommandElement[] parameters(INucleusServiceCollection serviceCollection) {
        return new CommandElement[] {
                serviceCollection.commandElementSupplier()
                    .createOtherUserPermissionElement(true, InvulnerabilityPermissions.OTHERS_GOD),
                NucleusParameters.OPTIONAL_ONE_TRUE_FALSE
        };
    }

    @Override
    public ICommandResult execute(ICommandContext<? extends CommandSource> context) throws CommandException {
        Player pl = context.getPlayerFromArgs();
        InvulnerabilityService service = context.getServiceCollection().getServiceUnchecked(InvulnerabilityService.class);
        boolean god = context.getOne(NucleusParameters.Keys.BOOL, Boolean.class).orElse(!service.isInvulnerable(pl));

        try {
            service.setInvulnerable(pl, god);
        } catch (Exception e) {
            // TODO: Better
            e.printStackTrace();
            return context.failResult();
        }

        if (!context.is(pl)) {
            context.sendMessage(god ? "command.god.player.on" : "command.god.player.off", pl.getName());
        }

        context.sendMessageTo(pl, god ? "command.god.on" : "command.god.off");
        return context.successResult();
    }
}
