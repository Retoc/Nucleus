/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.infoprovider;

import io.github.nucleuspowered.nucleus.modules.invulnerability.InvulnerabilityPermissions;
import io.github.nucleuspowered.nucleus.modules.invulnerability.services.InvulnerabilityService;
import io.github.nucleuspowered.nucleus.services.IMessageProviderService;
import io.github.nucleuspowered.nucleus.services.INucleusServiceCollection;
import io.github.nucleuspowered.nucleus.services.impl.playerinformation.NucleusProvider;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.entity.living.player.User;
import org.spongepowered.api.text.Text;

import java.util.Optional;

import javax.inject.Inject;

public class InvulnerabilityInfoProvider implements NucleusProvider {

    @Override public String getCategory() {
        return "invulnerability";
    }

    @Override public Optional<Text> get(User user, CommandSource source,
            INucleusServiceCollection serviceCollection) {
        if (serviceCollection.permissionService().hasPermission(source, InvulnerabilityPermissions.OTHERS_GOD)) {
            boolean godMode = serviceCollection.getServiceUnchecked(InvulnerabilityService.class).isInvulnerable(user);
            IMessageProviderService messageProviderService = serviceCollection.messageProvider();
            return Optional.of(
                    messageProviderService.getMessageFor(source, "seen.godmode",
                            messageProviderService.getMessageFor(source, "standard.yesno." + Boolean.toString(godMode).toLowerCase()))
            );
        }

        return Optional.empty();
    }
}
