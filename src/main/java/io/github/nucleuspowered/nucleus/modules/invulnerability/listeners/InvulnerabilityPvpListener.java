/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.listeners;

import io.github.nucleuspowered.nucleus.internal.interfaces.ListenerBase;
import io.github.nucleuspowered.nucleus.modules.invulnerability.InvulnerabilityPermissions;
import io.github.nucleuspowered.nucleus.modules.invulnerability.config.InvulnerabilityConfig;
import io.github.nucleuspowered.nucleus.modules.invulnerability.services.InvulnerabilityService;
import io.github.nucleuspowered.nucleus.services.INucleusServiceCollection;
import io.github.nucleuspowered.nucleus.services.IPermissionService;
import org.spongepowered.api.entity.Entity;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.cause.entity.damage.source.EntityDamageSource;
import org.spongepowered.api.event.entity.AttackEntityEvent;
import org.spongepowered.api.event.filter.Getter;
import org.spongepowered.api.event.filter.cause.Root;

import javax.inject.Inject;

public class InvulnerabilityPvpListener implements ListenerBase.Conditional {

    private final InvulnerabilityService service;
    private final IPermissionService permissionService;

    @Inject
    public InvulnerabilityPvpListener(INucleusServiceCollection serviceCollection) {
        this.service = serviceCollection.getServiceUnchecked(InvulnerabilityService.class);
        this.permissionService = serviceCollection.permissionService();
    }

    @Listener
    public void onAttack(AttackEntityEvent event, @Root EntityDamageSource source, @Getter("getTargetEntity") Entity entity) {
        if (source.getSource() instanceof Player) {
            Player player = (Player) source.getSource();
            if (this.service.isInvulnerable(player) &&
                    !this.permissionService.hasPermission(player, InvulnerabilityPermissions.GOD_PVP_OVERRIDE) && entity instanceof Player) {
                event.setCancelled(true);
            }
        }
    }

    @Override
    public boolean shouldEnable(INucleusServiceCollection serviceCollection) {
        return serviceCollection.moduleDataProvider().getModuleConfig(InvulnerabilityConfig.class).isDisablePvpOnGod();
    }
}
